// Code generated by MockGen. DO NOT EDIT.
// Source: internal/dao/dao.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	model "backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDaoInterface is a mock of DaoInterface interface.
type MockDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDaoInterfaceMockRecorder
}

// MockDaoInterfaceMockRecorder is the mock recorder for MockDaoInterface.
type MockDaoInterfaceMockRecorder struct {
	mock *MockDaoInterface
}

// NewMockDaoInterface creates a new mock instance.
func NewMockDaoInterface(ctrl *gomock.Controller) *MockDaoInterface {
	mock := &MockDaoInterface{ctrl: ctrl}
	mock.recorder = &MockDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaoInterface) EXPECT() *MockDaoInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDaoInterface) CreateUser(user model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDaoInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDaoInterface)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockDaoInterface) DeleteUser(ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDaoInterfaceMockRecorder) DeleteUser(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDaoInterface)(nil).DeleteUser), ID)
}

// GetUser mocks base method.
func (m *MockDaoInterface) GetUser(ID int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDaoInterfaceMockRecorder) GetUser(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDaoInterface)(nil).GetUser), ID)
}

// GetUserByUsername mocks base method.
func (m *MockDaoInterface) GetUserByUsername(username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockDaoInterfaceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockDaoInterface)(nil).GetUserByUsername), username)
}

// GetUsers mocks base method.
func (m *MockDaoInterface) GetUsers() ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockDaoInterfaceMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockDaoInterface)(nil).GetUsers))
}

// UpdateUser mocks base method.
func (m *MockDaoInterface) UpdateUser(ID int, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ID, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDaoInterfaceMockRecorder) UpdateUser(ID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDaoInterface)(nil).UpdateUser), ID, user)
}
